=========================================================
数组 以\0结尾 
sizeof（）返回的是数组空间占据的内存 因此会包含结尾的结束符号
注意区分‘\0’和‘0’前者为转义字符，ascii码为0，后者为数字0 ascii码为48 
大小写的字母ascii码相差32
=========================================================
eof为文件结束标识符 即 End Of File
它通常位于文件的最后一个字符的下一个地址空间 
=========================================================
动态联编：又称为动态关联，在编译阶段不能确定所要调用的函数，只有当程序运行时才能确定将要调用的函数。
动态联编要求：
1.成员函数声明为virtual
2.基类中声明为了虚函数，则派生类中不必再声明。
=========================================================
派生类和基类的关系以及访问关系
线程和进程
=========================================================
STL
=========================================================
编译链接的过程：
预处理->编译->汇编->链接
预处理的工作：
（1）将所有的#define删除，并展开所有的宏定义

（2）处理所有的条件预编译指令，如：#if  #ifdef #elif #else #endif

（3）处理#include预编译指令，将被包含的文件插进到该指令的位置，这个过程是递归的

（4）删除所有的注释//与/* */

（5）添加行号与文件名标识，以便产生调试用的行号信息以及编译错误或警告时能够显示行号

（6）保留所有的#pragma编译器指令，因为编译器需要使用它们
========================================================
虚函数：将基类中的函数声明为虚函数，然后就可以在子类中实现同名函数覆盖。子类中的函数就可以自动成为虚函数。
========================================================
大端模式：大端模式即将数据的高字节部分放在低地址空间，即如同顺序读入字符串的效果。从左到右进行读取
小端模式：即和大端模式相反，将数据的高字节部分放在高地址空间。 （小端也可以作为低尾，就是尾部或者是低字节数据放在低地址空间的意思。）
========================================================
宏定义
#define 用来进行定义
例子：
	#define kTabBar_Height        49.0f
	#define kString @"哈哈哈"
当程序中出现宏定义的字段kTabBar_Height或者kString时，将其替换为后面定义的内容
#if     用于进行分支判断
例子:
	#if 常量表达式
    	//程序段1
	#else
    	// 程序段2
	#endif           
当#if后面的常量表达式为真时，对程序段1进行编译，否则对程序段2进行编译
#ifdef 当标识符已经被定义过，则对程序段1进行编译，否则编译程序段2
例子：
	#ifdef <标识符>
    	//程序段1
	#else
    	//程序段2
	#endif

#ifndef 该标识符很重要 作用是检查预编译对象是否已经被定义 用于防止头文件的重复编译以及声明冲突
例：
	#ifndef <标识符>
    	//程序段1
	#else
    	//程序段2
	#endif

#ifdef和#ifndef被称为条件编译
这两个预编译很重要！
标识的命名规则一般是头文件名全大写，前后加下划线，并把文件名中的“.”也变成下划线，如：stdio.h变为_STDIO_H_


========================================================
指针的写法和调用
========================================================
内存分5个区：全局名字空间，自由存储区，寄存器，代码空间，栈
堆栈空间分配

（操作系统中的堆栈和数据结构中的堆栈：

数据结构中的堆：

堆实际上指的就是（满足堆性质的）优先队列的一种数据结构，第1个元素有最高的优先权。

堆性质：叶子节点小于（或大于）父亲节点，则为小（大）顶堆。

数据结构中的堆可以用一个数组来存储（完全二叉树结构。）

栈实际上就是满足先进后出的性质的数据结构

操作系统中的堆：

这里的堆是属于内存分配方式的一种：动态分配内存。

实现的方式更接近于链表。堆内存中有很多块内存，可能不是连续的。所有需要用链表来组织在分配的时候，有多种策略。首先查找是否有空闲的并且满足大小的堆内存，然后把最大的那块给需求者。这里有点像数据结构中堆的优先权。

操作系统中堆和栈的区别：
1、栈区（stack）― 由编译器自动分配释放 ，存放函数的参数值，局部变量的值等。其操作方式类似于数据结构中的栈。
2、堆区（heap）― 一般由程序员分配释放， 若程序员不释放，程序结束时可能由OS回收 。注意它与数据结构中的堆是两回事，分配方式倒是类似于链表。

栈（操作系统）：由操作系统自动分配释放 ，存放函数的参数值，局部变量的值等。其操作方式类似于数据结构中的栈。
堆（操作系统）： 一般由程序员分配释放， 若程序员不释放，程序结束时可能由OS回收，分配方式倒是类似于链表。

）
========================================================
结构化数据：
类似于数据库中的数据关系

半结构化：
有基本固定的模式，但是数据长度不定.例如：日志，JSON文档Email

非结构化文本：
无固定格式。例如：WORD，PPT，EXL，PPT、图片和音频
========================================================